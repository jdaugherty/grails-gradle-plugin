name: Release
on:
  release:
    types: [published]
env:
  GIT_USER_NAME: 'grails-build'
  GIT_USER_EMAIL: 'grails-build@users.noreply.github.com'
jobs:
  publish:
    permissions:
      packages: read  #  pre-release workflow
      contents: write  #  to create release
      issues: write  #  to modify milestones
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.release_version.outputs.value }}
      target_branch: ${{ steps.extract_branch.outputs.value }}
    steps:
      - name: "📥 Checkout repository"
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
      - name: "☕️ Setup JDK"
        uses: actions/setup-java@v4
        with:
          distribution: liberica
          java-version: 17
      - name: "🐘 Setup Gradle"
        uses: gradle/actions/setup-gradle@v4
        with:
          develocity-access-key: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
      - name: "📝 Store the target branch"
        id: extract_branch
        run: |
          echo "Determining Target Branch"
          TARGET_BRANCH=${GITHUB_REF#refs/heads/}
          echo $TARGET_BRANCH
          echo "value=${TARGET_BRANCH}" >> $GITHUB_OUTPUT
      - name: "📝 Store the current release version"
        id: release_version
        run: echo "value=${GITHUB_REF:11}" >> $GITHUB_OUTPUT
      - name: "⚙️ Run pre-release"
        uses: grails/github-actions/pre-release@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: "🧩 Run Assemble"
        if: success()
        id: assemble
        env:
          DEVELOCITY_BUILD_CACHE_NODE_USER: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER }}
          DEVELOCITY_BUILD_CACHE_NODE_KEY: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY }}
          GITHUB_MAVEN_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        run: ./gradlew assemble
      - name: "🚀 Upload Distribution"
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: grails-${{ steps.release_version.outputs.value }}.zip
          path: build/distributions/grails-${{ steps.release_version.outputs.value }}.zip
      - name: "📝 Generate secring file"
        env:
          SECRING_FILE: ${{ secrets.SECRING_FILE }}
        run: echo $SECRING_FILE | base64 -d > ${{ github.workspace }}/secring.gpg
      - name: "🚀 Publish to Sonatype OSSRH"
        id: publish
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          SONATYPE_NEXUS_URL: ${{ secrets.SONATYPE_NEXUS_URL }}
          SONATYPE_STAGING_PROFILE_ID: ${{ secrets.SONATYPE_STAGING_PROFILE_ID }}
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
          SIGNING_PASSPHRASE: ${{ secrets.SIGNING_PASSPHRASE }}
          SECRING_FILE: ${{ secrets.SECRING_FILE }}
          DEVELOCITY_BUILD_CACHE_NODE_USER: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER }}
          DEVELOCITY_BUILD_CACHE_NODE_KEY: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY }}
          GITHUB_MAVEN_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        run: >
            ./gradlew
            -Psigning.secretKeyRingFile=${{ github.workspace }}/secring.gpg 
            publishToSonatype 
            closeSonatypeStagingRepository
  release:
    environment: release
    needs: publish
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read  #  pre-release workflow
    steps:
      - name: "📥 Checkout repository"
        uses: actions/checkout@v4
      - name: "☕️ Setup JDK"
        uses: actions/setup-java@v4
        with:
          distribution: liberica
          java-version: 17
      - name: "📥 Checkout repository"
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          ref: v${{ needs.publish.outputs.release_version }}
      - name: "🐘 Setup Gradle"
        uses: gradle/actions/setup-gradle@v4
        with:
          develocity-access-key: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
      - name: Nexus Staging Close And Release
        env:
          DEVELOCITY_BUILD_CACHE_NODE_USER: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER }}
          DEVELOCITY_BUILD_CACHE_NODE_KEY: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          SONATYPE_STAGING_PROFILE_ID: ${{ secrets.SONATYPE_STAGING_PROFILE_ID }}
          GITHUB_MAVEN_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        run: >
            ./gradlew
            findSonatypeStagingRepository
            releaseSonatypeStagingRepository
      - name: Run post-release
        if: success()
        uses: grails/github-actions/post-release@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          SNAPSHOT_SUFFIX: -SNAPSHOT
  docs:
    environment: release
    needs: publish
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read  #  pre-release workflow
    steps:
      - name: "📥 Checkout repository"
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          ref: v${{ needs.publish.outputs.release_version }}
      - name: "☕️ Setup JDK"
        uses: actions/setup-java@v4
        with:
          distribution: liberica
          java-version: 17
      - name: "🐘 Setup Gradle"
        uses: gradle/actions/setup-gradle@v4
        with:
          develocity-access-key: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
      - name: "📜 Generate Groovydoc"
        id: groovydoc
        env:
          DEVELOCITY_BUILD_CACHE_NODE_USER: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER }}
          DEVELOCITY_BUILD_CACHE_NODE_KEY: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY }}
          GITHUB_MAVEN_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        run: ./gradlew groovydoc
      - name: "🚀 Publish to Github Pages"
        id: docs
        if: success()
        uses: grails/grails-github-actions/deploy-github-pages@main
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GRADLE_PUBLISH_RELEASE: 'true'
          SOURCE_FOLDER: build/docs
          VERSION: ${{ needs.publish.outputs.release_version }} # by default the action will use GITHUB_REF_NAME and remove a 'v' prefix, leave for now to be consistent

